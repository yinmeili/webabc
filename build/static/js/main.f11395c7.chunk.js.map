{"version":3,"sources":["showTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById","className"],"mappings":"yOACuBA,Y,2BCGFC,E,YACjB,aAAc,IAAD,8BACT,+CAUJC,YAAY,SAACC,GAEM,KAAZA,EAAEC,SAED,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAfnB,EAmBbC,aAAa,SAACN,GACV,EAAKO,SAAL,eACMP,EAAEI,OAAOI,KAAMC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,IAAIL,EAAEI,OAAOC,UAnB/D,EAAKN,YAAY,EAAKA,YAAYW,KAAjB,gBACjB,EAAKC,MAAM,CAEPC,EAAE,GACFC,EAAE,GACFC,EAAE,IAPG,E,iFAyBTC,QAAQC,IAAIC,MACZA,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAGZ,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMC,EAAGU,UAAWL,KAAKlB,YAAawB,KAAK,SAD/G,IAGI,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGS,UAAWL,KAAKlB,YAAawB,KAAK,SAHxG,IAKI,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGQ,UAAWL,KAAKlB,YAAawB,KAAK,SALxG,IAOI,2BAEIN,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAGzC,2BAAOM,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAKD,KAAK,SACvC,4BAAQE,QAAS,WAAKV,QAAQC,IAAI,EAAKQ,IAAInB,SAA3C,qB,GA5CuBR,aCFlB6B,E,iLAKP,IAAD,OACAC,EAAMV,KAAKf,MAAXyB,KACL,OACI,4BAEMA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACT,wBAAIC,IAAKD,GACND,EADH,OACY,4BAAQJ,QAAS,SAACzB,GAAD,OAAK,EAAKE,MAAM8B,IAAIF,EAAI9B,KAAzC,yB,GAZOH,aA4BrC6B,EAAQO,aAAa,CACnBN,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICkCKO,E,YACjB,aAAc,IAAD,8BACT,+CAsBJC,QAAU,SAACC,GAEP,EAAK7B,SAAS,CACVoB,KAAK,GAAD,mBAAM,EAAKhB,MAAMgB,MAAjB,CAAsBS,OA1BrB,EA6BbC,QAAU,SAACP,GAEP,IAAIH,EAAI,YAAO,EAAKhB,MAAMgB,MAC1BA,EAAKW,OAAOR,EAAI,GAEhB,EAAKvB,UAAS,SAACI,EAAMT,GAEjB,OADAa,QAAQC,IAAIL,EAAMgB,MACX,CACHA,KAAMA,OAnCd,EAAKhB,MAAQ,CACTgB,KAAK,CAAC,EAAE,EAAE,GACVf,EAAE,IACFC,EAAE,KALG,E,sEAmDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKc,KAAKkB,UACrB,kBAAC,EAAD,CAASH,IAAKf,KAAKoB,QAASV,KAAMV,KAAKN,MAAMgB,Y,GAvDvB9B,aC5BtC0C,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SA8F5CD,SAASC,eAAe,QAK5BC,UAAU,W","file":"static/js/main.f11395c7.chunk.js","sourcesContent":["import React,{Fragment,Component}from 'react'\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log(\"constructor\")\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log(\"didupdate\");\r\n        console.log(preState);\r\n        console.log(this.state.time);\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"didmount\");\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name:this.state.a}\r\n    }\r\n    render(){\r\n        console.log(\"render\")\r\n        var {name,age}=this.props;\r\n        return (\r\n        <Fragment>\r\n            {/*条件渲染 */}\r\n            {name.length>5?<div>姓名：{name}</div>:''}\r\n            {name.length>5&&<div>姓名：{name}</div>}\r\n            <div>{this.state.time}</div>\r\n            <div>姓名：{name}</div>\r\n            {/*循环渲染*/}\r\n            <div>\r\n                {\r\n                    //遍历\r\n                    age.map((item,index)=>{\r\n                        if(index%2===0){\r\n                            return <p key={item}>{item}</p>;\r\n                        }\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\n\r\n// export default ShowTime;\r\n//命名导出,可以导出多个，被引入时与导出的名一致\r\nexport {ShowTime};\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证），写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            // inputValue:'\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n        \r\n    }\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode===13){\r\n            \r\n            this.props.add(e.target.value);\r\n        }\r\n        \r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n             [e.target.name]:parseInt(e.target.value===''?'0':e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return ( \r\n            <div>\r\n                <input ref='a'name='a' onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"></input>\r\n                +\r\n                <input name='b' onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"></input>\r\n                +\r\n                <input name='c' onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"></input>\r\n                =\r\n                <p>{\r\n                    //将字符串转化为数字\r\n                    this.state.a+this.state.b+this.state.c\r\n                }</p>\r\n                {/*非受控组件:一次性获取或处理表单元素的值，获取节点获取值*/}\r\n                <input ref={(inp)=>{this.inp=inp}}type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//受控组件：\r\n//1.给input添加value属性，赋值为state的值\r\n//2.给input标签绑定onChange事件，，，，，\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    // delItem(idx,e){\r\n    //     console.log(e);\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n        var {todo}=this.props;\r\n        return (\r\n            <ul>\r\n              {\r\n                  todo.map((item,idx) =>\r\n                  <li key={idx}>\r\n                    {item}--- <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                   \r\n\r\n                  </li>)\r\n              }\r\n\r\n            </ul>\r\n        )\r\n    }\r\n    \r\n}\r\nTodoing.propTypes={\r\n  todo:PropTypes.array,\r\n  del:PropTypes.func\r\n}\r\n//设置默认属性值\r\nTodoing.defaultProps={\r\n  todo:[1,2,3,4,4]\r\n}","// import React, { Component } from 'react'\r\n// import Todoinput from './Todoinput'\r\n// import Todoing from './Todoing'\r\n \r\n// export default class Todolist extends Component {\r\n//     constructor(){\r\n//         super();\r\n//         this.state={\r\n//             todo:[1,2,3]\r\n//         }\r\n//         //深拷贝\\浅拷贝\r\n//         var obj={a:100,b:[1,2,3]};\r\n//         //新的对象，和原来对象引用不一样\r\n//         // var o={...obj};\r\n//         var obj1={c:300};\r\n//         var o=Object.assign(obj,obj1);\r\n//         // var o=JSON.parse(JSON.stringify(obj));\r\n//         // o.b[0]=200;\r\n//         console.log(o===obj);\r\n//         Object.keys(obj).forEach((item)=>{\r\n//             console.log(item);\r\n//             console.log(obj[item]);\r\n//         })\r\n\r\n//     }\r\n//     addItem=(data)=>{\r\n//         // this.state.todo.push(data);\r\n//         // console.log(this.state.todo);\r\n//         // console.log(data);\r\n//         //改变状态\r\n//         this.setState({\r\n//             todo:[...this.state.todo,data]\r\n//         })\r\n        \r\n//     }\r\n//     delItem=(idx)=>{\r\n        \r\n//         //1.不能直接改变或处理state,通过setState改变\r\n//         let todo=[...this.state.todo];\r\n//         //开始删的位置，删掉几个\r\n//         todo.splice(idx,1);\r\n//         //2.setState是异步执行\r\n//         this.setState((states,props)=>{\r\n//             console.log(state.todo);\r\n//             return{\r\n//                 todo:todo\r\n//             }\r\n//         })\r\n//         // this.setState({\r\n//         //     todo:todo\r\n//         // })\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <Todoinput add={this.addItem}/>\r\n//                 <Todoing del={this.delItem} todo={this.state.todo}/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\nimport React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo: [...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {ShowTime} from './showTime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n\n//显示当前系统时间\n// function showTime(){\n//     var ele=<div>\n//         <p>当前时间是：</p>\n//         <div>{new Date().toLocaleString()}</div>\n//         </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n\n// }\n// showTime();\n// setInterval(showTime,1000);\n//函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//             <div>\n//                 <div>  {props.name}</div>\n//                 <div>\n                  \n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </div>\n//             </Fragment>)\n// }\n//\n//组件交互\n//父组件----->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件----->父组件\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n\n// var num=[1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"wangj\"/>,\n//     document.getElementById('root')  \n// );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// var ele=<h1>hello{str}</h1>\n// var str='react';\nvar obj={\n    type:'h1',\n    props:{\n        id:'tit',\n        class:'tit',\n        children:['hello','react']\n    }\n}\n// var ele=React.createElement('h1',{id:'tit',class:\"title\"},'hello');\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));\n\n\n// serviceWorker.unregister();\nfunction render(obj,container){\n    var {type,props}=obj;\n    //文档碎片\n    var fragment=document.createDocumentFragment();\n    var ele=document.createElement(obj.type);\n    for(var item in obj.props){\n        // ele.item=obj.props.item;\n        if(item==='class'){\n            ele.className=obj.props[item];\n        }else if(item==='children'){\n            for(var i=0;i<props[item].length;i++){\n                // ele.innerHTML+=props.children[i];\n                if(typeof props.children[i]==='object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt=document.createTextNode(props.children);\n                    ele.appendChild(txt);\n    \n                }\n               \n            }\n        }else{\n            ele[item]=obj.props[item];\n        }\n        // ele[item]=obj.props[item];\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n//页面渲染过程\n/*\n请求HTML页面，浏览器HTML解析器解析html文件，生成DOM树\nlink引入css文件，css解析器解析css，生成css对象模型，CSSOM和DOM tree结合生成一个render tree,最后浏览器绘制页面\n*/\n//页面回流（重排reflow）:DOM结构变化，内容变化，大小，显示的变化，位置的变化，使性能变差\n//页面重绘（repaint）:颜色的变化（背景色，字体颜色，边框颜色，代价小）\n//1.先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div=document.getElementById('root');\n// var str='';\n\n// for(var i=0;i<1000;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n//2.对样式进行处理\nvar div=document.getElementById('root');\n// div.style.width='100px';\n// div.style.heigth='100px';\n// div.style.background='red';\n\ndiv.className='active';\n//3.offsetLeft,offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid=div.offsetWidth;\n// setInterval(()=>{\n//   wid+=1;\n//   div.style.width=wid+'px';\n// },100)\n//4文档碎片（内容中的一个变量）.只要页面回流就会引起页面重绘\n"],"sourceRoot":""}