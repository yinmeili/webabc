{"version":3,"sources":["components/Header.js","container/Home.js","container/Api.js","container/About.js","container/Start.js","App.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Header","className","src","alt","style","float","to","Home","url","this","props","match","Component","Api","About","Start","Todoinput","handleInput","e","keyCode","add","target","value","handleChange","setState","name","parseInt","bind","state","inputValue","ab","console","log","b","c","class","id","onChange","onKeyDown","placeholder","type","Todoing","sum","todo","i","length","checked","map","item","idx","key","check","data","onClick","del","defaultProps","Todolist","addItem","tolist","push","localStorage","setItem","JSON","stringify","delItem","splice","a","list","parse","getItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0aa60dc8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';  \r\nexport default function Header(){\r\n\r\n    return (\r\n        <div className='header'>\r\n            <header>\r\n                <img src=\"https://static2.cnodejs.org/public/images/cnodejs_light.svg\" alt=\"\"/>\r\n                <div style={{float:'right'}}>\r\n                    <Link to='/home'>首页</Link>\r\n                    <Link to='/start'>新手入门</Link>\r\n                    <Link to='/api'>API</Link>\r\n                    <Link to='/about'>关于</Link>\r\n                    <Link>注册</Link>\r\n                    <Link>登录</Link>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport {Link,Route} from 'react-router-dom';\r\nexport default class Home extends Component {\r\n    render() {\r\n        let {url} = this.props.match\r\n        // console.log(this.props)\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Link to={`${url}/all`}>全部</Link>\r\n                    <Link to={`${url}/jinghua`}>精华</Link>\r\n                    <Link to={`${url}/share`}>分享</Link>\r\n                </div>\r\n                <div>\r\n                    {/* <Route path={url+'/all'} component={All}/> */}\r\n                    {/* <Route path='/home/jinghua' component={Jinghua}/> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Api extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Api\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                About\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Start extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Start\r\n            </div>\r\n        )\r\n    }\r\n}","// import React, { Component } from 'react'\n// import {BrowserRouter as Router,Route,Switch,Redirect} from 'react-router-dom';\n// import Hoc from './Hoc/Hoc';\n// import Parent from './Context/Parent';\n// import Sider from './Sider';\n// import NoMatch from './NoMatch';\n// import Content from './Router/Content';\n// import Hooks from './Router/Hooks';\n// function Login(props){\n//     console.log(props);\n//     return <button>登录</button>\n// }\n// // let LoginWithRouter=withRouter(Login);\n// export default class App extends Component {\n//     render() {\n//         return (\n//             <Router basename=\"/build\">\n//                 <div>\n                    \n//                     {/* <Content>\n//                         <h2>这是children的内容</h2>\n//                         <ul>\n//                             <li>1</li>\n//                         </ul>\n//                     </Content> */}\n//                     <Sider/>\n//                     <div style={\n//                         {float:'left',\n//                         border:'2px solid red',\n//                         marginLeft: 100}\n//                     }>\n//                     <Switch>\n//                         <Route exact path='/hoc' component={Hoc} />\n//                         <Route path='/parent' component={Parent}/>\n//                         {/* <Redirect from='/old' to='/hoc'/> */}\n//                         <Route path='/old' render={()=><Redirect to='/hoc'/>}/>\n//                         <Route path='/content/:id' component={Content}/>\n//                         <Route path='/hooks/:id'component={Hooks}/>\n//                         <Route>\n//                             <NoMatch/>\n//                         </Route>\n//                     </Switch>\n//                     </div>\n//                 </div>  \n//             </Router>\n//         )\n//     }\n// }\n\n\n\n\n\nimport React, { Component } from 'react'\nimport Header from './components/Header'\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nimport Home from './container/Home';\nimport Api from './container/Api';\nimport About from './container/About';\nimport Start from './container/Start';\nexport default class App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Header/>\n                </div>\n                <div className='content'>\n                    <div className=\"left\">\n                        <Route path='/home' component={Home}/>\n                        <Route path='/start' component={Start}/>\n                        <Route path='/api' component={Api}/>\n                        <Route path='/about' component={About}/>\n                    </div>\n                    <div className=\"right\">\n\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证），写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        //通过bind绑定this\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            inputValue:'',\r\n            ab:''\r\n            // b:'',\r\n            // c:''\r\n        }\r\n        \r\n    }\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode===13){\r\n            \r\n            this.props.add(e.target.value);\r\n        }\r\n        \r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n             [e.target.name]:parseInt(e.target.value===''?'0':e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        // this.refs.a.focus();\r\n    }\r\n    render() {\r\n       \r\n        return ( \r\n            <div className={this.state.b+this.state.c>10?'box':''}>\r\n                <div class=\"a\">\r\n                    ToDolist\r\n                    <input id='inp'class=\"b\" name='ab' onChange={this.handleChange} value={this.state.ab} onKeyDown={this.handleInput} placeholder=\"添加ToDo\" type=\"text\"></input>\r\n                </div>\r\n                {/* <label htmlFor='inp'>请输入第一个数：</label> */}\r\n                \r\n               \r\n               \r\n    \r\n                {/*非受控组件:一次性获取或处理表单元素的值，获取节点获取值*/}\r\n                {/* <input ref={(inp)=>{this.inp=inp}}type=\"text\"/> */}\r\n                {/* <div>\r\n                    <div class=\"ab1\">\r\n                        <div class=\"ab12\">正在进行</div>\r\n                        <div class=\"ab11\"></div>\r\n                    </div>\r\n                </div> */}\r\n                \r\n                {/* <button \r\n                    style={{color:'red',fontSize:'10px'}}\r\n                    onClick={()=>{console.log(this.inp.value)}}>\r\n                    提交\r\n                </button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//受控组件：\r\n//1.给input添加value属性，赋值为state的值\r\n//2.给input标签绑定onChange事件，，，，，\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    // delItem(idx,e){\r\n    //     console.log(e);\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n      let sum=0;\r\n        var {todo}=this.props;\r\n        for(var i=0;i<todo.length;i++){\r\n          if(!todo[i].checked){\r\n            sum++;\r\n          }\r\n        }\r\n        return (\r\n          <div>\r\n            <h2>正在进行</h2>\r\n            <h3>{sum}</h3>\r\n            <ul>\r\n              {\r\n                  todo.map((item,idx) =>{\r\n                    if(!item.checked){\r\n                      return(\r\n                      <li key={idx}>\r\n                        <input type='checkbox' checked={item.checked}  onChange={(e)=>this.props.check(idx)}/>\r\n                        {item.data}--- <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                      \r\n\r\n                      </li>\r\n                      )\r\n                    }\r\n                  })\r\n              }\r\n\r\n            </ul>\r\n            <h2>已经完成</h2>\r\n            <p>{todo.length-sum}</p>\r\n            <ul>\r\n              {\r\n                  todo.map((item,idx) =>{\r\n                    \r\n                    if(item.checked){\r\n                      return(\r\n                      <li key={idx}>\r\n\r\n                        <input type='checkbox' checked={item.checked}  onChange={(e)=>this.props.check(idx)}/>\r\n                        {item.data}--- <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                      \r\n\r\n                      </li>\r\n                      )\r\n                    }\r\n                  })\r\n              }\r\n\r\n            </ul>\r\n          </div>\r\n        )\r\n    }\r\n    \r\n}\r\nTodoing.propTypes={\r\n  todo:PropTypes.array,\r\n  del:PropTypes.func\r\n}\r\n//设置默认属性值\r\nTodoing.defaultProps={\r\n  todo:[1,2,3,4,4]\r\n}","// import React, { Component } from 'react'\r\n// import Todoinput from './Todoinput'\r\n// import Todoing from './Todoing'\r\n \r\n// export default class Todolist extends Component {\r\n//     constructor(){\r\n//         super();\r\n//         this.state={\r\n//             todo:[1,2,3]\r\n//         }\r\n//         //深拷贝\\浅拷贝\r\n//         var obj={a:100,b:[1,2,3]};\r\n//         //新的对象，和原来对象引用不一样\r\n//         // var o={...obj};\r\n//         var obj1={c:300};\r\n//         var o=Object.assign(obj,obj1);\r\n//         // var o=JSON.parse(JSON.stringify(obj));\r\n//         // o.b[0]=200;\r\n//         console.log(o===obj);\r\n//         Object.keys(obj).forEach((item)=>{\r\n//             console.log(item);\r\n//             console.log(obj[item]);\r\n//         })\r\n\r\n//     }\r\n//     addItem=(data)=>{\r\n//         // this.state.todo.push(data);\r\n//         // console.log(this.state.todo);\r\n//         // console.log(data);\r\n//         //改变状态\r\n//         this.setState({\r\n//             todo:[...this.state.todo,data]\r\n//         })\r\n        \r\n//     }\r\n//     delItem=(idx)=>{\r\n        \r\n//         //1.不能直接改变或处理state,通过setState改变\r\n//         let todo=[...this.state.todo];\r\n//         //开始删的位置，删掉几个\r\n//         todo.splice(idx,1);\r\n//         //2.setState是异步执行\r\n//         this.setState((states,props)=>{\r\n//             console.log(state.todo);\r\n//             return{\r\n//                 todo:todo\r\n//             }\r\n//         })\r\n//         // this.setState({\r\n//         //     todo:todo\r\n//         // })\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <Todoinput add={this.addItem}/>\r\n//                 <Todoing del={this.delItem} todo={this.state.todo}/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\nimport React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n// import './Todo.css'\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[],\r\n        \r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        let tolist=this.state.todo;\r\n        tolist.push({\r\n            checked:false,\r\n            data:data\r\n        })\r\n        \r\n        this.setState({\r\n            todo: tolist\r\n        },()=>{\r\n            localStorage.setItem('list',JSON.stringify(tolist));\r\n        })\r\n\r\n    }\r\n    delItem = (idx)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let tolist=this.state.todo;\r\n        // let todo = [...this.state.todo];\r\n        tolist.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState({\r\n            todo:tolist\r\n            // console.log(state.todo);\r\n            // return {\r\n            //     todo: todo\r\n            // }\r\n        },()=>{\r\n            localStorage.setItem('list',JSON.stringify(tolist));\r\n\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n    }\r\n\r\n    check=(item)=>{\r\n        let tolist=this.state.todo;\r\n        tolist[item].checked=!tolist[item].checked\r\n       \r\n        this.setState({\r\n            todo:tolist\r\n        },()=>{\r\n            localStorage.setItem('list',JSON.stringify(tolist));\r\n\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        var list=JSON.parse(localStorage.getItem('list'));\r\n        if(list){\r\n            this.setState({\r\n                todo:list\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} check={this.check} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","// import React,{Fragment,Component} from 'react';\n// import ReactDOM from 'react-dom';\n// import {ShowTime} from './showTime';\n// import './index.css';\n// import Todolist from './Todolist/Todolist';\n// import Request from './Request/Request'\n// import Parent from './Context/Parent'\n// import {con,con2} from './Context/Context'\n// import Hoc from './Hoc/Hoc'\n// import Portal from './Portal/Portal'\n// import ParentPortal from './Portal/ParentPortal'\n// import App from './App'\n// //显示当前系统时间\n// // function showTime(){\n// //     var ele=<div>\n// //         <p>当前时间是：</p>\n// //         <div>{new Date().toLocaleString()}</div>\n// //         </div>;\n// //     ReactDOM.render(\n// //         ele,\n// //         document.querySelector('#root')\n// //     );\n\n// // }\n// // showTime();\n// // setInterval(showTime,1000);\n// //函数声明组件\n// // function ShowTime(props){\n// //     console.log(props);\n// //     return (<Fragment>\n// //             <div>\n// //                 <div>  {props.name}</div>\n// //                 <div>\n                  \n// //                     {new Date().toLocaleString()}\n// //                 </div>\n// //             </div>\n// //             </Fragment>)\n// // }\n// //\n// //组件交互\n// //父组件----->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// //子组件----->父组件\n\n// /*\n// Context:\n// 1.生成Context，可写在一个js文件中，export导出\n// 2.在根组件import Provider，并配置Provider,加上value属性\n// 3.在需要获取数据的组件，import Consumer并配置Consumer\n// Consumer组件里是个函数，函数的参数传过来的是value值\n// */\n// let id=1234;\n// ReactDOM.render(\n//     <App/>,\n//     document.getElementById('root')\n// )\n// // ReactDOM.render(\n// //     <con.Provider value={id}>\n// //         <div>ddd</div>\n// //         <con2.Provider>\n// //             <Parent/>\n// //         </con2.Provider>\n      \n// //     </con.Provider>,\n// //         document.getElementById('root')\n// // );\n\n\n\n// // var num=[1,2,3,4,5];\n// // ReactDOM.render(\n// //     <ShowTime age={num} name=\"wangj\"/>,\n// //     document.getElementById('root')  \n// // );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // import './index.css';\n// // import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n// // var ele=<h1>hello{str}</h1>\n// // var str='react';\n// var obj={\n//     type:'h1',\n//     props:{\n//         id:'tit',\n//         class:'tit',\n//         children:['hello','react']\n//     }\n// }\n// // var ele=React.createElement('h1',{id:'tit',class:\"title\"},'hello');\n// // console.log(ele);\n// // ReactDOM.render(ele, document.getElementById('root'));\n\n\n// // serviceWorker.unregister();\n// function render(obj,container){\n//     var {type,props}=obj;\n//     //文档碎片\n//     var fragment=document.createDocumentFragment();\n//     var ele=document.createElement(obj.type);\n//     for(var item in obj.props){\n//         // ele.item=obj.props.item;\n//         if(item==='class'){\n//             ele.className=obj.props[item];\n//         }else if(item==='children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 // ele.innerHTML+=props.children[i];\n//                 if(typeof props.children[i]==='object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     var txt=document.createTextNode(props.children);\n//                     ele.appendChild(txt);\n    \n//                 }\n               \n//             }\n//         }else{\n//             ele[item]=obj.props[item];\n//         }\n//         // ele[item]=obj.props[item];\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n// // render(obj,document.getElementById('root'));\n// //页面渲染过程\n// /*\n// 请求HTML页面，浏览器HTML解析器解析html文件，生成DOM树\n// link引入css文件，css解析器解析css，生成css对象模型，CSSOM和DOM tree结合生成一个render tree,最后浏览器绘制页面\n// */\n// //页面回流（重排reflow）:DOM结构变化，内容变化，大小，显示的变化，位置的变化，使性能变差\n// //页面重绘（repaint）:颜色的变化（背景色，字体颜色，边框颜色，代价小）\n// //1.先用变量进行dom处理，最后一次渲染\n// // console.time('time');\n// // var div=document.getElementById('root');\n// // var str='';\n\n// // for(var i=0;i<1000;i++){\n// //     str+='<p>'+i+'</p>';\n// // }\n// // div.innerHTML=str;\n// // console.timeEnd('time');\n// //2.对样式进行处理\n// var div=document.getElementById('root');\n// // div.style.width='100px';\n// // div.style.heigth='100px';\n// // div.style.background='red';\n\n// div.className='active';\n// //3.offsetLeft,offsetWidth等都会引起回流\n// // console.log(div.offsetLeft);\n// // var wid=div.offsetWidth;\n// // setInterval(()=>{\n// //   wid+=1;\n// //   div.style.width=wid+'px';\n// // },100)\n// //4文档碎片（内容中的一个变量）.只要页面回流就会引起页面重绘\n\n\n\n\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Todolist from './Todolist/Todolist'\nimport './index.css';\n// 容器组件 / UI组件（展示组件）\n// 智能组件 / 木偶组件\n\n// 容器组件（container/pages）：逻辑，功能\n// UI组件（components）：写成函数组件，展示，返回React元素\n\nReactDOM.render(\n    // <App/>,\n    <Todolist/>,\n    document.getElementById('root')\n)"],"sourceRoot":""}